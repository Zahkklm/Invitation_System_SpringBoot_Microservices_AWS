version: '3.8'
services:
  # Kafka and Zookeeper for Event-Driven Architecture
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres-user:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: user_service_user
      POSTGRES_PASSWORD: userpass
    ports:
      - "5433:5432"
    networks:
      - backend

  postgres-org:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: organization_service_db
      POSTGRES_USER: org_service_user
      POSTGRES_PASSWORD: orgpass
    ports:
      - "5434:5432"
    networks:
      - backend

  postgres-inv:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: invitation_service_db
      POSTGRES_USER: invitation_service_user
      POSTGRES_PASSWORD: invpass
    ports:
      - "5435:5432"
    networks:
      - backend

  eureka-server:
    build:
      context: .                              # ✅ Build from root
      dockerfile: eureka-server/Dockerfile    # ✅ Use this Dockerfile
    ports:
      - "8761:8761"
    networks:
      - backend
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 40s

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - COGNITO_REGION=${COGNITO_REGION}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_JWK_SET_URI=${COGNITO_JWK_SET_URI}
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - backend

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/user_service_db
      SPRING_DATASOURCE_USERNAME: user_service_user
      SPRING_DATASOURCE_PASSWORD: userpass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8084:8084"
    depends_on:
      postgres-user:
        condition: service_started
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend

  organization-service:
    build:
      context: .
      dockerfile: organization-service/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-org:5432/organization_service_db
      SPRING_DATASOURCE_USERNAME: org_service_user
      SPRING_DATASOURCE_PASSWORD: orgpass
    ports:
      - "8082:8082"
    depends_on:
      postgres-org:
        condition: service_started
      eureka-server:
        condition: service_healthy
    networks:
      - backend

  invitation-service:
    build:
      context: .
      dockerfile: invitation-service/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inv:5432/invitation_service_db
      SPRING_DATASOURCE_USERNAME: invitation_service_user
      SPRING_DATASOURCE_PASSWORD: invpass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8085:8085"
    depends_on:
      postgres-inv:
        condition: service_started
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge